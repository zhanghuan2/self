// Generated by CoffeeScript 1.6.3
(function () {
    var FileNotFoundError, blocks, env,  findLayouts, fs, getComponentViewPath, getRealPath, handlebars, layouts, componentsPartials, registerComponentLayout, findComponentLayout, normalizePath, registerLayout, renderFromRealPath, templateLoader, _, glob;


    _ = require("lodash");

    fs = require("fs");

    env = require("../enviroments");

    templateLoader = require("./template_loader");

    handlebars = require("handlebars");

    glob = require('glob');

    FileNotFoundError = require("../errors").FileNotFoundError;

    require("./helpers");

    env.extraHelpers.forEach(function (helperPath) {
        var e;
        try {
            return require(helperPath)(handlebars);
        } catch (_error) {
            e = _error;
            return console.error("error when load extra helper file: " + helperPath, e);
        }
    });

    blocks = {};

    handlebars.registerHelper("partial", function (name, options) {
        var block;
        if (!(block = blocks[name])) {
            block = blocks[name] = [];
        }
        block.push(options.fn(this));
        return void 0;
    });

    handlebars.registerHelper("block", function (name, options) {
        var block, content;
        block = blocks[name] || [];
        if (block.length === 0) {
            if (options.fn) {
                return options.fn(this);
            } else {
                return "";
            }
        } else {
            content = block.join("\n");
            blocks[name] = [];
            return content;
        }
    });

    registerLayout = function (filePath) {
        var name, t;
        if (!/\.hbs$/.test(filePath)) {
            return;
        }
        t = fs.readFileSync(filePath);
        name = filePath.slice(env.viewsHome.length + 1).split(".")[0];
        if (env.oldMode) {
            name = "views/" + name;
        }
        return handlebars.registerPartial(name, handlebars.compile(t.toString()));
    };

    layouts = [];

    findLayouts = function (dir) {
        var files;
        files = fs.readdirSync(dir);
        return files.forEach(function (file) {
            var filePath;
            filePath = "" + dir + "/" + file;
            if (fs.statSync(filePath).isDirectory()) {
                return findLayouts(filePath);
            } else {
                return layouts.push(filePath);
            }
        });
    };

    findLayouts(env.viewsHome);

    layouts.forEach(function (file) {
        return registerLayout(file);
    });


    componentsPartials = [];

    registerComponentLayout = function (filePath) {
        var name, t;
        if (!/\.hbs$/.test(filePath)) {
            return;
        }

        t = fs.readFileSync(filePath);
        console.log(filePath);
        name = filePath.slice(env.componentsHome.length + 1).split(".")[0];
        name = "component:" + name;

        componentsPartials.push(name);
        return handlebars.registerPartial(name, handlebars.compile(t.toString()));
    };

    findComponentLayout = function () {
        var filePaths = glob.sync(env.componentsHome + '/**/{all_templates,other_templates,templates}/*.hbs');
        _.map(filePaths, registerComponentLayout);
    }

    findComponentLayout();


    normalizePath = function (path) {
        if (path[0] === "/") {
            return path.slice(1);
        } else {
            return path;
        }
    };

    getRealPath = function (path) {
        if (env.pageMode) {
            return "" + env.viewsHome + "/" + (normalizePath(path)) + "/view.hbs";
        } else {
            return "" + env.viewsHome + "/" + (normalizePath(path)) + ".hbs";
        }
    };

    getComponentViewPath = function (path) {
        return "" + env.componentsHome + "/" + (normalizePath(path)) + "/view.hbs";
    };

    renderFromRealPath = function (path, context) {
        var template;
        template = templateLoader.fromPathSync(path);
        return template(context);
    };

    module.exports = {
        renderFile: function (path, context) {
            return renderFromRealPath(getRealPath(path), context);
        },
        renderComponent: function (path, context) {
            var err;
            context = context || {};
            context[this.CONST.COMP_PATH] = path;
            try {
                console.log('------11111-----:', context)
                return renderFromRealPath(getComponentViewPath(path), context);
            } catch (_error) {
                err = _error;
                if (err instanceof FileNotFoundError) {
                    console.log("[Component Not Found] " + err.path);
                    return "component view not found: " + err.path;
                } else {
                    throw err;
                }
            }
        },
        CONST: {
            COMP_PATH: "COMP_PATH"
        }
    };

    require("./render_helpers");

}).call(this);
